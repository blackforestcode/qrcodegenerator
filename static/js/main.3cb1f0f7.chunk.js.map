{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","errorText","setErrorText","_useState3","_useState4","url","setUrl","_useState5","_useState6","qr","setQr","_useState7","_useState8","spinner","setSpinner","react_default","a","createElement","className","style","padding","height","onSubmit","e","preventDefault","includes","setTimeout","concat","marginTop","type","name","placeholder","value","onChange","target","onKeyDown","length","onClick","cursor","color","Fragment","src","alt","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3cb1f0f7.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nconst App = () => {\n  const [errorText, setErrorText] = useState('');\n  const [url, setUrl] = useState('');\n  const [qr, setQr] = useState('');\n  const [spinner, setSpinner] = useState(false);\n\n  const onChange = e => setUrl(e.target.value);\n\n  const onSubmit = e => {\n    e.preventDefault();\n    if (url === '' || !url.includes('http') || !url.includes('https')) {\n      setErrorText('Please enter a valid URL with http:// or https://');\n    } else {\n      setSpinner(true);\n\n      setTimeout(() => {\n        setQr(\n          `https://api.qrserver.com/v1/create-qr-code/?data=${url}&size=300x300`\n        );\n        setSpinner(false);\n      }, 500);\n    }\n  };\n\n  const resetForm = () => {\n    setUrl('');\n    setQr('');\n  };\n\n  return (\n    <div className=\"App\" style={{ padding: '5%' }}>\n      <div className=\"container\" style={{ height: '100vh' }}>\n        <div className=\"row\">\n          <div className=\"column\">\n            <h1>QR Code Generator</h1>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"column\">\n            <form\n              className=\"form\"\n              onSubmit={onSubmit}\n              style={{ marginTop: '3%' }}\n            >\n              <input\n                type=\"url\"\n                name=\"text\"\n                placeholder=\"Enter your URL with http://... or https://...\"\n                value={url}\n                onChange={onChange}\n                onKeyDown={() => setErrorText('')}\n              />\n              {qr.length > 0 ? (\n                <span\n                  className=\"float-right\"\n                  onClick={resetForm}\n                  style={{ cursor: 'pointer' }}\n                >\n                  Delete <span style={{ color: '#ff4d4d' }}>X</span>\n                </span>\n              ) : null}\n              {errorText !== '' ? (\n                <p style={{ color: '#ff4d4d' }}>{errorText}</p>\n              ) : null}\n              <input\n                className=\"button-primary\"\n                type=\"submit\"\n                value=\"Create QR-Code\"\n              />\n            </form>\n          </div>\n        </div>\n\n        {spinner ? (\n          <div className=\"row\">\n            <div className=\"column column-50 column-offset-33\">\n              <div className=\"spinner\" />\n            </div>\n          </div>\n        ) : null}\n\n        <div className=\"row\">\n          <div className=\"column column-50 column-offset-33\">\n            {qr.length > 0 ? (\n              <>\n                <img src={qr} alt={`QR Code of ${url}`} />\n                <figcaption>{url}</figcaption>\n              </>\n            ) : null}\n          </div>\n        </div>\n      </div>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"column\">\n            <p>\n              Stack:\n              <br />\n              <span className=\"badge\">React.js</span>{' '}\n              <span className=\"badge\">Milligram CSS</span>{' '}\n              <span className=\"badge\">\n                QR Code API by{' '}\n                <a\n                  href=\"http://goqr.me/\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  http://goqr.me/\n                </a>\n              </span>\n            </p>\n          </div>\n        </div>\n        <hr />\n        <div className=\"row\">\n          <div className=\"column\">\n            <span className=\"float-left\">\n              made with &hearts; by{' '}\n              <a\n                href=\"https://blackforestcode.com\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                BLACK FOREST CODE\n              </a>\n            </span>\n            <span className=\"float-right\">\n              <small>„QR Code“ is a trademark of DENSO WAVE INCORPORATED</small>\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}